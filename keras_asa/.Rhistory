summary(data)
acc.data = data[which(data$sub_acc > 0.4),]
length(unique(data$Subject))
length(unique(acc.data$Subject))
summary(acc.data)
data = read.csv("~/research/DPL/1995/data/1995_revised_data_realRT_v4.csv")
sub_data = read.csv("~/research/DPL/1995/data/1995_revised_subject_acc_v4.csv")
colnames(sub_data) = c("subject", "mean_accuracy")
summary(sub_data)
wrd_data = read.csv("~/research/DPL/1995/data/1995_revised_word_acc_v4.csv")
colnames(wrd_data) = c("Word", "mean_accuracy")
summary(wrd_data)
View(wrd_data)
hist(sub_data$mean_accuracy, main = "Histogram: subject accuracy", xlab = "subject accuracy", xlim = range(0.0, 1.0))
hist(wrd_data$mean_accuracy, main = "Histogram: word accuracy", xlab = "word accuracy", xlim = range(0.0, 1.0))
length(sub_data$subject[sub_data$mean_accuracy < 0.4])
length(wrd_data$Word[wrd_data$mean_accuracy < .5])
data$Subject = as.factor(data$Subject)
summary(data)
acc.data = data[which(data$sub_acc > 0.4),]
length(unique(data$Subject))
length(unique(acc.data$Subject))
summary(acc.data)
acc.data$miss = 1 - acc.data$isCorrect
acc.data$compete[acc.data$isHighFreq == "y"] = "Many"
acc.data$compete[acc.data$isHighFreq == "n"] = "Few"
acc.data$compete = as.factor(acc.data$compete)
summary(acc.data)
miss.sum = do.call(data.frame, aggregate(miss ~ syllStr + stressPattern + compete, data = acc.data,
function(x) c(mean = mean(x), sd = sd(x))))
View(miss.sum)
ggplot(acc.data, aes(x = compete, y = miss, fill = stressPattern)) +
geom_bar(stat = "summary", position = "dodge", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", aes(width=0.5), position = position_dodge(0.9)) +
facet_grid( ~ syllStr) +
xlab("Number of competetitors") + ylab("Error Rate") +
labs(fill = "Stress Pattern") + ggtitle("Error Rate") +
# ylim(0, 1) +
coord_cartesian(ylim=c(0, 0.65)) +
theme(text = element_text(size = 25, face = "bold"))
rt.data = acc.data[which(acc.data$isCorrect == 1),]
rt.sum = do.call(data.frame, aggregate(sub_rt ~ syllStr + stressPattern + compete, data = rt.data,
function(x) c(mean = mean(x), sd = sd(x))))
ggplot(rt.data, aes(x = compete, y = sub_rt, fill = stressPattern)) +
geom_bar(stat = "summary", position = "dodge", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", aes(width=0.5), position = position_dodge(0.9)) +
facet_grid( ~ syllStr) +
xlab("Number of competetitors") + ylab("RT") +
labs(fill = "Stress Pattern") + ggtitle("RT") +
coord_cartesian(ylim=c(300, 1000)) +
theme(text = element_text(size = 25, face = "bold"))
# CVCC analysis
md.cvcc.rt = lmer(sub_rt ~ stressPattern * compete + (1|Subject), data = CVCC_rt, REML=F)
Anova(md.cvcc.rt)
CVC = acc.data[which(acc.data$syllStr == "cvc"),]
CVCC = acc.data[which(acc.data$syllStr == "cvcc"),]
CVC_rt = rt.data[which(rt.data$syllStr == "cvc"),]
CVCC_rt = rt.data[which(rt.data$syllStr == "cvcc"),]
# CVCC analysis
md.cvcc.rt = lmer(sub_rt ~ stressPattern * compete + (1|Subject), data = CVCC_rt, REML=F)
Anova(md.cvcc.rt)
CVCC_rt_many = CVCC_rt[which(CVCC_rt$compete == "Many"),]
md.cvcc.many.rt = lmer(sub_rt ~ stressPattern + (1|Subject), data = CVCC_rt_many, REML=F)
Anova(md.cvcc.many.rt)
CVCC_rt_few = CVCC_rt[which(CVCC_rt$compete == "Few"),]
md.cvcc.few.rt = lmer(sub_rt ~ stressPattern + (1|Subject), data = CVCC_rt_few, REML=F)
Anova(md.cvcc.few.rt)
md.cvcc.er = lmer(miss ~ stressPattern * compete + (1|Subject), data = CVCC, REML=F)
Anova(md.cvcc.er)
CVCC_many = CVCC[which(CVCC$compete == "Many"),]
md.cvcc.many = lmer(miss ~ stressPattern + (1|Subject), data = CVCC_many, REML=F)
Anova(md.cvcc.many)
CVCC_few = CVCC[which(CVCC$compete == "Few"),]
md.cvcc.few = lmer(miss ~ stressPattern + (1|Subject), data = CVCC_few, REML=F)
Anova(md.cvcc.few)
# CVC analysis
md.cvc.rt = lmer(sub_rt ~ stressPattern * compete + (1|Subject), data = CVC_rt, REML=F)
Anova(md.cvc.rt)
CVC_rt_many = CVC_rt[which(CVC_rt$compete == "Many"),]
md.cvc.many.rt = lmer(sub_rt ~ stressPattern + (1|Subject), data = CVC_rt_many, REML=F)
Anova(md.cvc.many.rt)
CVC_rt_few = CVC_rt[which(CVC_rt$compete == "Few"),]
md.cvc.few.rt = lmer(sub_rt ~ stressPattern + (1|Subject), data = CVC_rt_few, REML=F)
Anova(md.cvc.few.rt)
md.cvc.er = lmer(miss ~ stressPattern * compete + (1|Subject), data = CVC, REML=F)
Anova(md.cvc.er)
CVC_many = CVC[which(CVC$compete == "Many"),]
md.cvc.many = lmer(miss ~ stressPattern + (1|Subject), data = CVC_many, REML=F)
Anova(md.cvc.many)
CVC_few = CVC[which(CVC$compete == "Few"),]
md.cvc.few = lmer(miss ~ stressPattern + (1|Subject), data = CVC_few, REML=F)
Anova(md.cvc.few)
require(lme4)
require(ggplot2)
require(car)
require(ez)
require(readr)
data = read.csv("~/research/DPL/1995Brit/data/1995_pilot_realRT.csv")
sub_data = read.csv("~/research/DPL/1995/data/1995_pilot_subject_acc.csv")
colnames(sub_data) = c("subject", "mean_accuracy")
summary(sub_data)
wrd_data = read.csv("~/research/DPL/1995/data/1995_pilot_word_acc.csv")
colnames(wrd_data) = c("Word", "mean_accuracy")
summary(wrd_data)
sub_data = read.csv("~/research/DPL/1995Brit/data/1995_pilot_subject_acc.csv")
colnames(sub_data) = c("subject", "mean_accuracy")
summary(sub_data)
wrd_data = read.csv("~/research/DPL/1995Brit/data/1995_pilot_word_acc.csv")
colnames(wrd_data) = c("Word", "mean_accuracy")
summary(wrd_data)
hist(sub_data$mean_accuracy, main = "Histogram: subject accuracy", xlab = "subject accuracy", xlim = range(0.0, 1.0))
hist(wrd_data$mean_accuracy, main = "Histogram: word accuracy", xlab = "word accuracy", xlim = range(0.0, 1.0))
View(sub_data)
sub_data = read.csv("~/research/DPL/1995Brit/data/1995_pilot_subject_acc.csv")
colnames(sub_data) = c("subject", "mean_accuracy")
summary(sub_data)
sub_data = read.csv("~/research/DPL/1995Brit/data/1995_pilot_subject_acc.csv")
summary(sub_data)
sub_data = read.csv("~/research/DPL/1995Brit/data/1995_pilot_subject_acc.csv", header = F)
summary(sub_data)
colnames(sub_data) = c("subject", "mean_accuracy")
wrd_data = read.csv("~/research/DPL/1995Brit/data/1995_pilot_word_acc.csv", header = F)
colnames(wrd_data) = c("Word", "mean_accuracy")
summary(wrd_data)
hist(sub_data$mean_accuracy, main = "Histogram: subject accuracy", xlab = "subject accuracy", xlim = range(0.0, 1.0))
hist(wrd_data$mean_accuracy, main = "Histogram: word accuracy", xlab = "word accuracy", xlim = range(0.0, 1.0))
summary(data)
data$Subject = as.factor(data$Subject)
summary(data)
# acc.data = data[which(data$sub_acc > 0.4),]
acc.data = data
length(unique(data$Subject))
length(unique(acc.data$Subject))
summary(acc.data)
acc.data$miss = 1 - acc.data$isCorrect
data = read.csv("~/research/DPL/1995Brit/data/1995_pilot_realRT.csv")
sub_data = read.csv("~/research/DPL/1995Brit/data/1995_pilot_subject_acc.csv", header = F)
colnames(sub_data) = c("subject", "mean_accuracy")
summary(sub_data)
wrd_data = read.csv("~/research/DPL/1995Brit/data/1995_pilot_word_acc.csv", header = F)
colnames(wrd_data) = c("Word", "mean_accuracy")
summary(wrd_data)
# length(sub_data$subject[sub_data$mean_accuracy < 0.4])
# length(wrd_data$Word[wrd_data$mean_accuracy < .5])
data$Subject = as.factor(data$Subject)
summary(data)
# acc.data = data[which(data$sub_acc > 0.4),]
acc.data = data
length(unique(data$Subject))
length(unique(acc.data$Subject))
summary(acc.data)
acc.data$miss = 1 - acc.data$isCorrect
acc.data$compete[acc.data$isHigh == "y"] = "Many"
acc.data$compete[acc.data$isHigh == "n"] = "Few"
acc.data$compete = as.factor(acc.data$compete)
summary(acc.data)
miss.sum = do.call(data.frame, aggregate(miss ~ syllStr + stressPattern + compete, data = acc.data,
function(x) c(mean = mean(x), sd = sd(x))))
View(miss.sum)
ggplot(acc.data, aes(x = compete, y = miss, fill = stressPattern)) +
geom_bar(stat = "summary", position = "dodge", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", aes(width=0.5), position = position_dodge(0.9)) +
facet_grid( ~ syllStr) +
xlab("Number of competetitors") + ylab("Error Rate") +
labs(fill = "Stress Pattern") + ggtitle("Error Rate") +
# ylim(0, 1) +
coord_cartesian(ylim=c(0, 0.65)) +
theme(text = element_text(size = 25, face = "bold"))
rt.data = acc.data[which(acc.data$isCorrect == 1),]
rt.sum = do.call(data.frame, aggregate(sub_rt ~ syllStr + stressPattern + compete, data = rt.data,
function(x) c(mean = mean(x), sd = sd(x))))
View(rt.sum)
rt.sum = do.call(data.frame, aggregate(subRT ~ syllStr + stressPattern + compete, data = rt.data,
function(x) c(mean = mean(x), sd = sd(x))))
View(rt.sum)
ggplot(rt.data, aes(x = compete, y = sub_rt, fill = stressPattern)) +
geom_bar(stat = "summary", position = "dodge", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", aes(width=0.5), position = position_dodge(0.9)) +
facet_grid( ~ syllStr) +
xlab("Number of competetitors") + ylab("RT") +
labs(fill = "Stress Pattern") + ggtitle("RT") +
coord_cartesian(ylim=c(300, 1000)) +
theme(text = element_text(size = 25, face = "bold"))
ggplot(rt.data, aes(x = compete, y = subRT, fill = stressPattern)) +
geom_bar(stat = "summary", position = "dodge", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", aes(width=0.5), position = position_dodge(0.9)) +
facet_grid( ~ syllStr) +
xlab("Number of competetitors") + ylab("RT") +
labs(fill = "Stress Pattern") + ggtitle("RT") +
coord_cartesian(ylim=c(300, 1000)) +
theme(text = element_text(size = 25, face = "bold"))
ggplot(rt.data, aes(x = compete, y = subRT, fill = stressPattern)) +
geom_bar(stat = "summary", position = "dodge", fun.y = "mean") +
stat_summary(fun.data = mean_se, geom = "errorbar", aes(width=0.5), position = position_dodge(0.9)) +
facet_grid( ~ syllStr) +
xlab("Number of competetitors") + ylab("RT") +
labs(fill = "Stress Pattern") + ggtitle("RT") +
coord_cartesian(ylim=c(100, 700)) +
theme(text = element_text(size = 25, face = "bold"))
CVC = acc.data[which(acc.data$syllStr == "CVC"),]
CVCC = acc.data[which(acc.data$syllStr == "CVCC"),]
CVC_rt = rt.data[which(rt.data$syllStr == "CVC"),]
CVCC_rt = rt.data[which(rt.data$syllStr == "CVCC"),]
# CVCC analysis
md.cvcc.rt = lmer(subRT ~ stressPattern * compete + (1|Subject), data = CVCC_rt, REML=F)
Anova(md.cvcc.rt)
CVCC_rt_many = CVCC_rt[which(CVCC_rt$compete == "Many"),]
md.cvcc.many.rt = lmer(sub_rt ~ stressPattern + (1|Subject), data = CVCC_rt_many, REML=F)
md.cvcc.many.rt = lmer(subRT ~ stressPattern + (1|Subject), data = CVCC_rt_many, REML=F)
Anova(md.cvcc.many.rt)
CVCC_rt_few = CVCC_rt[which(CVCC_rt$compete == "Few"),]
md.cvcc.few.rt = lmer(subRT ~ stressPattern + (1|Subject), data = CVCC_rt_few, REML=F)
Anova(md.cvcc.few.rt)
md.cvcc.er = lmer(miss ~ stressPattern * compete + (1|Subject), data = CVCC, REML=F)
Anova(md.cvcc.er)
CVCC_many = CVCC[which(CVCC$compete == "Many"),]
md.cvcc.many = lmer(miss ~ stressPattern + (1|Subject), data = CVCC_many, REML=F)
Anova(md.cvcc.many)
CVCC_few = CVCC[which(CVCC$compete == "Few"),]
md.cvcc.few = lmer(miss ~ stressPattern + (1|Subject), data = CVCC_few, REML=F)
Anova(md.cvcc.few)
# CVC analysis
md.cvc.rt = lmer(subRT ~ stressPattern * compete + (1|Subject), data = CVC_rt, REML=F)
Anova(md.cvc.rt)
CVC_rt_many = CVC_rt[which(CVC_rt$compete == "Many"),]
md.cvc.many.rt = lmer(subRT ~ stressPattern + (1|Subject), data = CVC_rt_many, REML=F)
Anova(md.cvc.many.rt)
Anova(md.cvc.rt)
CVC_rt_many = CVC_rt[which(CVC_rt$compete == "Many"),]
md.cvc.many.rt = lmer(subRT ~ stressPattern + (1|Subject), data = CVC_rt_many, REML=F)
Anova(md.cvc.many.rt)
CVC_rt_few = CVC_rt[which(CVC_rt$compete == "Few"),]
md.cvc.few.rt = lmer(suRT ~ stressPattern + (1|Subject), data = CVC_rt_few, REML=F)
Anova(md.cvc.few.rt)
md.cvc.few.rt = lmer(subRT ~ stressPattern + (1|Subject), data = CVC_rt_few, REML=F)
Anova(md.cvc.few.rt)
md.cvc.er = lmer(miss ~ stressPattern * compete + (1|Subject), data = CVC, REML=F)
Anova(md.cvc.er)
CVC_many = CVC[which(CVC$compete == "Many"),]
md.cvc.many = lmer(miss ~ stressPattern + (1|Subject), data = CVC_many, REML=F)
Anova(md.cvc.many)
CVC_few = CVC[which(CVC$compete == "Few"),]
md.cvc.few = lmer(miss ~ stressPattern + (1|Subject), data = CVC_few, REML=F)
Anova(md.cvc.few)
require(ggplot2)
require(ggplot2)
require(lme4)
#function to convert a vector to min-max coding
minmax <- function(xs) {
xsmin <- min(xs)
xsmax <- max(xs)
xsdiff <- xsmax - xsmin
(xs-xsmin)/xsdiff
}
data = read.delim(file.choose(), sep="\t", header=T)
g1 = data[which(data$Gate == "g1"),]
data = data[which(data$Gate != "g1"),]
summary(data)
gate = c("g2", "g3", "g4", "g5", "g6")
for (g in gate){
data$mmDur[data$Gate == g] = minmax(data$Duration_Added_by_Gate[data$Gate == g])
data$mmImp1[data$Gate == g] = minmax(data$seg1_imp[data$Gate == g])
data$mmImp2[data$Gate == g] = minmax(data$seg2_imp[data$Gate == g])
}
summary(data)
data$four_gate   = as.factor(data$four_gate)
data$preceed     = as.factor(data$preceed)
data$seg1_stress = as.factor(data$seg1_stress)
data$seg2_stress = as.factor(data$seg2_stress)
summary(data)
#gate4 = data[which(data$four_gate == 1),]
#gate6 = data[which(data$four_gate == 0),]
gate6 = data
ggplot(gate6.seg1, aes(x = mmDur, y = seg1_imp, label=seg1)) +
facet_grid(Sylltype~Gate) + geom_point() + geom_text(aes(label=seg1),hjust=0, vjust=0) +
geom_smooth(method=lm)
ggplot(gate6.seg2, aes(x = mmDur, y = mmImp2)) + facet_grid( ~ seg2M)
ggplot(gate6.seg2, aes(x = mmDur, y = seg2_imp)) +
facet_grid(Sylltype~Gate) + geom_point() + geom_text(aes(label=seg2),hjust=0, vjust=0) +
geom_smooth(method=lm)
gate4 = data[which(data$four_gate == 1),]
gate6 = data[which(data$four_gate == 0),]
data.seg1 = data[which(data$Gate == "g2" | data$Gate == "g3"),]
seg1.C = data.seg1[which(data.seg1$seg1M != "tense" & data.seg1$seg1M != "lax" & data.seg1$seg1M != "diphthong"),]
summary(seg1.C)
seg1.V = data.seg1[which(data.seg1$seg1M == "tense" | data.seg1$seg1M == "lax" | data.seg1$seg1M == "diphthong"),]
data.seg2 = data[which(data$Gate == "g4" | data$Gate == "g5" | data$Gate == "g6"),]
seg2.C = data.seg2[which(data.seg2$seg2M != "tense" & data.seg2$seg2M != "lax" & data.seg2$seg2M != "diphthong"),]
seg2.V = data.seg2[which(data.seg2$seg2M == "tense" | data.seg2$seg2M == "lax" | data.seg2$seg2M == "diphthong"),]
gate4.seg1 = gate4[which(gate4$Gate == "g3"),]
gate4.seg2 = gate4[which(gate4$Gate == "g4" | gate4$Gate == "g5" | gate4$Gate == "g6"),]
syll = c("CC", "CV", "VC", "VV")
cor.test(gate6.seg1$mmDur, gate6.seg1$mmImp1)
cor.test(gate6.seg2$mmDur, gate6.seg2$mmImp2)
for (syl in syll){
print(syl)
print(cor.test(gate6.seg1$Duration_Added_by_Gate[gate6.seg1$Sylltype == syl], gate6.seg1$seg1_imp[gate6.seg1$Sylltype == syl]))
}
ggplot(data, aes(x = mmDur, y = mmImp1)) + geom_smooth(method="lm", color='red') +
xlab("Normalized Added Duration") + ylab("Normalized Change in Accuracy") + facet_grid(~Gate)
ggplot(seg1.C, aes(x = mmDur, y = mmImp1)) + geom_smooth(method="lm", aes(color = seg1M), lwd = 2.0) + facet_grid( ~ GateFull) +
xlab("Normalized Added Duration") + ylab("Normalized Change in Accuracy") +
labs(color = "Manner") +
ggtitle("Segment 1: Consonant") + ylim(0, 1.1) +
theme(text = element_text(size=20, face="bold"))
data$GateFull = gsub('g', 'Gate ', data$Gate)
summary(data)
ggplot(data, aes(x = mmDur, y = mmImp1)) + geom_smooth(method="lm", color='red') +
xlab("Normalized Added Duration") + ylab("Normalized Change in Accuracy") + facet_grid(~Gate)
ggplot(seg1.C, aes(x = mmDur, y = mmImp1)) + geom_smooth(method="lm", aes(color = seg1M), lwd = 2.0) + facet_grid( ~ GateFull) +
xlab("Normalized Added Duration") + ylab("Normalized Change in Accuracy") +
labs(color = "Manner") +
ggtitle("Segment 1: Consonant") + ylim(0, 1.1) +
theme(text = element_text(size=20, face="bold"))
summary(data)
gate4 = data[which(data$four_gate == 1),]
gate6 = data[which(data$four_gate == 0),]
data.seg1 = data[which(data$Gate == "g2" | data$Gate == "g3"),]
seg1.C = data.seg1[which(data.seg1$seg1M != "tense" & data.seg1$seg1M != "lax" & data.seg1$seg1M != "diphthong"),]
summary(seg1.C)
seg1.V = data.seg1[which(data.seg1$seg1M == "tense" | data.seg1$seg1M == "lax" | data.seg1$seg1M == "diphthong"),]
data.seg2 = data[which(data$Gate == "g4" | data$Gate == "g5" | data$Gate == "g6"),]
seg2.C = data.seg2[which(data.seg2$seg2M != "tense" & data.seg2$seg2M != "lax" & data.seg2$seg2M != "diphthong"),]
seg2.V = data.seg2[which(data.seg2$seg2M == "tense" | data.seg2$seg2M == "lax" | data.seg2$seg2M == "diphthong"),]
gate4.seg1 = gate4[which(gate4$Gate == "g3"),]
gate4.seg2 = gate4[which(gate4$Gate == "g4" | gate4$Gate == "g5" | gate4$Gate == "g6"),]
ggplot(seg1.C, aes(x = mmDur, y = mmImp1)) +
geom_point(aes(color = seg1M)) +
facet_grid( ~ Gate) +
xlab("Normalized Added Duration") + ylab("Normalized Improved Accuracy") +
labs(color = "Manner") +
ggtitle("Segment 1: Consonant") + ylim(0, 1.1) +
theme(text = element_text(size=20, face="bold"))
ggplot(seg2.C, aes(x = mmDur, y = mmImp2)) + geom_smooth(method="lm", aes(color = seg2M), lwd = 2.0) + facet_grid( ~ GateFull) +
xlab("Normalized Added Duration") + ylab("Normalized Change in Accuracy") +
labs(color = "Manner") +
ggtitle("Segment 2: Consonant") + ylim(0, 1.0) +
theme(text = element_text(size=20, face="bold"))
ggplot(seg2.C, aes(x = mmDur, y = mmImp2)) +
geom_smooth(method="lm", aes(color = seg2M), lwd = 2.0, linetype = seg2M) +
facet_grid( ~ GateFull) +
xlab("Normalized Added Duration") + ylab("Normalized Change in Accuracy") +
labs(color = "Manner") +
ggtitle("Segment 2: Consonant") + ylim(0, 1.0) +
theme(text = element_text(size=20, face="bold"))
ggplot(seg2.C, aes(x = mmDur, y = mmImp2)) +
geom_smooth(method="lm", aes(color = seg2M), lwd = 2.0, linetype = aes(seg2M)) +
facet_grid( ~ GateFull) +
xlab("Normalized Added Duration") + ylab("Normalized Change in Accuracy") +
labs(color = "Manner") +
ggtitle("Segment 2: Consonant") + ylim(0, 1.0) +
theme(text = element_text(size=20, face="bold"))
ggplot(seg2.C, aes(x = mmDur, y = mmImp2)) +
geom_smooth(method="lm", aes(color = seg2M, linetype = seg2M), lwd = 2.0) +
facet_grid( ~ GateFull) +
xlab("Normalized Added Duration") + ylab("Normalized Change in Accuracy") +
labs(color = "Manner") +
ggtitle("Segment 2: Consonant") + ylim(0, 1.0) +
theme(text = element_text(size=20, face="bold"))
ggplot(seg2.C, aes(x = mmDur, y = mmImp2)) +
geom_smooth(method="lm", aes(linetype = seg2M), lwd = 2.0) +
facet_grid( ~ GateFull) +
xlab("Normalized Added Duration") + ylab("Normalized Change in Accuracy") +
labs(color = "Manner") +
ggtitle("Segment 2: Consonant") + ylim(0, 1.0) +
theme(text = element_text(size=20, face="bold"))
ggplot(seg2.C, aes(x = mmDur, y = mmImp2)) +
geom_smooth(method="lm", aes(linetype = seg2M), lwd = 1.0) +
facet_grid( ~ GateFull) +
xlab("Normalized Added Duration") + ylab("Normalized Change in Accuracy") +
labs(color = "Manner") +
ggtitle("Segment 2: Consonant") + ylim(0, 1.0) +
theme(text = element_text(size=20, face="bold"))
ggplot(seg2.C, aes(x = mmDur, y = mmImp2)) +
geom_smooth(method="lm", aes(color = "black", linetype = seg2M), lwd = 1.0) +
facet_grid( ~ GateFull) +
xlab("Normalized Added Duration") + ylab("Normalized Change in Accuracy") +
labs(color = "Manner") +
ggtitle("Segment 2: Consonant") + ylim(0, 1.0) +
theme(text = element_text(size=20, face="bold"))
ggplot(seg2.C, aes(x = mmDur, y = mmImp2)) +
geom_smooth(method="lm", aes(linetype = seg2M), lwd = 1.0) +
facet_grid( ~ GateFull) +
xlab("Normalized Added Duration") + ylab("Normalized Change in Accuracy") +
labs(color = "Manner") +
ggtitle("Segment 2: Consonant") + ylim(0, 1.0) +
theme(text = element_text(size=20, face="bold"))
source('~/.active-rstudio-document', echo=TRUE)
head(data)
summary(data)
colnames(data) = c("file", "true", "prediction")
summary(data)
sum_data = do.call(data.frame, aggregate(true ~ file + prediction, data = data,
function(x) c(mean = mean(x), sd = sd(x))))
View(sum_data)
MSE(sum_data$prediction, sum_data$true.mean)
mse(sum_data$prediction, sum_data$true.mean)
library(Metrics)
install.packages("Metrics")
require(Metrics)
View(sum_data)
mse(sum_data$prediction, sum_data$true.mean)
cor.test(data$prediction, data$true)
head(data)
plot(data$true, data$prediction)
data = read.csv(file.choose(), sep = "\t")
colnames(data) = c("file", "language", true", "prediction")
colnames(data) = c("file", "language", "true", "prediction")
summary(data)
data = read.csv(file.choose(), sep = "\t")
colnames(data) = c("file", "language", "true", "prediction")
summary(data)
data = read.csv(file.choose(), sep = "\t")
colnames(data) = c("file", "language", "true", "prediction")
summary(data)
sum_data = do.call(data.frame, aggregate(true ~ file + prediction, data = data,
function(x) c(mean = mean(x), sd = sd(x))))
View(sum_data)
mse(sum_data$prediction, sum_data$true.mean)
cor.test(data$true, data$prediction)
boxplot(true ~ language, data)
boxplot(prediction ~ language, data)
data$diff = data$true - data$prediction
boxplot(diff ~ language, data)
data$diff = (data$true - data$prediction) ** 2
boxplot(diff ~ language, data)
data$diff = data$true - data$prediction
boxplot(diff ~ language, data)
plot(diff ~ language, data)
require(ggplot2)
ggplot(data, aes(x = true, y = prediction)) +
geom_smooth(method="lm", aes(linetype = language), lwd = 1.0) +
theme(text = element_text(size=20, face="bold"))
ggplot(data, aes(x = true, y = prediction)) +
geom_smooth(method="lm", aes(color = language), lwd = 1.0) +
theme(text = element_text(size=20, face="bold"))
ggplot(data, aes(x = true, y = prediction)) +
geom_smooth(method="lm", aes(color = language), lwd = 1.0) +
geom_point() +
theme(text = element_text(size=20, face="bold"))
ggplot(data, aes(x = true, y = prediction)) +
geom_smooth(method="lm", aes(color = language), lwd = 1.0) +
geom_point(aes(color = language)) +
theme(text = element_text(size=20, face="bold"))
eng_data = data[data$language == "ENG"]
eng_data = data[data$language == "ENG",]
View(eng_data)
data = read.csv(file.choose(), sep = "\t")
data = read.csv(file.choose(), sep = "\t")
summary(data)
data = read.csv(file.choose(), sep = "\t")
data = read.csv(file.choose(), sep = ",")
head(data)
data = read.csv(file.choose(), sep = "\t")
summary(data)
colnames(data) = c("score", "language", "stimuli", "wav")
summary(data)
boxplot(score ~ language, data)
eng_data = data[data$language == "ENG",]
View(eng_data)
sum_data = do.call(data.frame, aggregate(true ~ stimuli, data = data,
function(x) c(mean = mean(x), sd = sd(x))))
View(sum_data)
sum_data = do.call(data.frame, aggregate(true ~ stimuli + language, data = data,
function(x) c(mean = mean(x), sd = sd(x))))
View(sum_data)
sum_data = do.call(data.frame, aggregate(true ~ stimuli + language, data = data,
function(x) c(mean = mean(x), sd = sd(x))))
sum_data = do.call(data.frame, aggregate(score ~ stimuli + language, data = data,
function(x) c(mean = mean(x), sd = sd(x))))
View(sum_data)
sum_data = do.call(data.frame, aggregate(score ~ stimuli + language, data = eng_data,
function(x) c(mean = mean(x), sd = sd(x))))
View(sum_data)
high = sum_data[sum_data$score.mean >= 5, ]
View(high)
high = sum_data[sum_data$score.mean >= 5.5, ]
View(high)
high = sum_data[sum_data$score.mean >= 5.5 & sum_data$score.sd < 1, ]
high = sum_data[sum_data$score.mean >= 5.5 & sum_data$score.sd < .6, ]
high = sum_data[sum_data$score.mean >= 5.5 & sum_data$score.sd < .8, ]
high = sum_data[sum_data$score.mean >= 5.5 & sum_data$score.sd < .5, ]
high = sum_data[sum_data$score.mean >= 5.5 & sum_data$score.sd < 1, ]
data = read.csv(file.choose(), sep = "\t")
summary(data)
setwd("/Users/seongjinpark/PhD/Diss/automatic_speech_eval/keras_asa")
###### ANALYZE CV RESUTS (FLUENCY) ######
mel_data = read.csv("./results/mel_10CV_fluency_wL1.txt", sep = "\t")
colnames(mel_data) = c("CV", "Stimuli", "language", "true", "pred")
mel_data$CV = as.factor(mel_data$CV)
mse(mel_data$true, mel_data$pred)
require(Metrics)
require(ggplot2)
mse(mel_data$true, mel_data$pred)
cor.test(mel_data$true, mel_data$pred)
summary(cor.test(mel_data$true, mel_data$pred))
summary(cor(mel_data$true, mel_data$pred))
cor.test(mel_data$true, mel_data$pred)
summary(lm(true ~ pred, mel_data))
###### ANALYZE CV RESUTS (ACCENT) ######
mel_data = read.csv("./results/mel_10CV_accented_wL1.txt", sep = "\t")
###### ANALYZE CV RESUTS (ACCENT) ######
mel_data = read.csv("./results/accented_mel_10CV.txt", sep = "\t")
###### ANALYZE CV RESUTS (ACCENT) ######
mel_acc_data = read.csv("./results/accented_mel_10CV.txt", sep = "\t")
summary(mel_acc_data)
colnames(mel_acc_data) = c("CV", "Stimuli", "true", "pred")
mel_acc_data$CV = as.factor(mel_acc_data$CV)
summary(mel_acc_data)
mse(mel_acc_data$true, mel_acc_data$pred)
cor.test(mel_acc_data$true, mel_acc_data$pred)
summary(lm(true ~ pred, mel_acc_data))
